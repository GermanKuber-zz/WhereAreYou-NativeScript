"use strict";
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var FriendsLiveService = (function () {
    function FriendsLiveService() {
        this.mockListFriend = new Array();
        this.mockListFriend.push({
            id: 1,
            latitude: 37.33233141,
            longitude: -122.0312186
        });
        this.mockListFriend.push({
            id: 2,
            latitude: 37.33253141,
            longitude: -122.0312186
        });
        this.mockListFriend.push({
            id: 3,
            latitude: 37.33263121,
            longitude: -122.0315187
        });
    }
    FriendsLiveService.prototype.getFriendsByGroup = function (idGroup) {
        return Rx_1.Observable.of(this.mockListFriend);
    };
    FriendsLiveService.prototype.updateFriendLocation = function (callback) {
        var _this = this;
        //TODO: Meotodo que debo remplazar con el comportamiento de SignalR
        setTimeout(function () {
            _this.generateRanonMove(callback);
            _this.updateFriendLocation(callback);
        }, 300);
    };
    //TODO: Metodo mock donde simulto el movimiento de un amigo Demo eliminar
    FriendsLiveService.prototype.generateRanonMove = function (callback) {
        var friend = this.mockListFriend[this.getRandomInt(0, 3)];
        var test = (Math.random() * (0.00002000 - 0.00055120) + 0.00055120).toFixed(4);
        var test2 = (Math.random() * (0.00004000 - 0.00079120) + 0.00079120).toFixed(4);
        friend.latitude = friend.latitude + +test;
        friend.longitude = friend.longitude + +test2;
        callback(friend);
    };
    FriendsLiveService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    FriendsLiveService.prototype.getRandomInt = function (min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min)) + min;
    };
    return FriendsLiveService;
}());
FriendsLiveService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], FriendsLiveService);
exports.FriendsLiveService = FriendsLiveService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJpZW5kcy1saXZlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZnJpZW5kcy1saXZlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMkM7QUFDM0MsOEJBQXFDO0FBQ3JDLGdDQUE4QjtBQUM5QixpQ0FBK0I7QUFLL0IsSUFBYSxrQkFBa0I7SUFFN0I7UUFEUSxtQkFBYyxHQUFHLElBQUksS0FBSyxFQUFrQixDQUFDO1FBRW5ELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFpQjtZQUN2QyxFQUFFLEVBQUUsQ0FBQztZQUNMLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFNBQVMsRUFBRSxDQUFDLFdBQVc7U0FDeEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQWlCO1lBQ3ZDLEVBQUUsRUFBRSxDQUFDO1lBQ0wsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFLENBQUMsV0FBVztTQUN4QixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBaUI7WUFDdkMsRUFBRSxFQUFFLENBQUM7WUFDTCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUUsQ0FBQyxXQUFXO1NBQ3hCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCw4Q0FBaUIsR0FBakIsVUFBa0IsT0FBZTtRQUMvQixNQUFNLENBQUMsZUFBVSxDQUFDLEVBQUUsQ0FBbUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxpREFBb0IsR0FBcEIsVUFBcUIsUUFBa0M7UUFBdkQsaUJBTUM7UUFMQyxtRUFBbUU7UUFDbkUsVUFBVSxDQUFDO1lBQ1QsS0FBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDO0lBRUQseUVBQXlFO0lBQ2pFLDhDQUFpQixHQUF6QixVQUEwQixRQUFrQztRQUMxRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDMUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQzdDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBR0QseUNBQVksR0FBWixVQUFhLEtBQWU7UUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNPLHlDQUFZLEdBQXBCLFVBQXFCLEdBQUcsRUFBRSxHQUFHO1FBQzNCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN2RCxDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBbkRELElBbURDO0FBbkRZLGtCQUFrQjtJQUQ5QixpQkFBVSxFQUFFOztHQUNBLGtCQUFrQixDQW1EOUI7QUFuRFksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvUnhcIjtcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL2RvXCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9tYXBcIjtcblxuaW1wb3J0IHsgRnJpZW5kUG9zaXRpb24gfSBmcm9tICcuL2ZyaWVuZCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGcmllbmRzTGl2ZVNlcnZpY2Uge1xuICBwcml2YXRlIG1vY2tMaXN0RnJpZW5kID0gbmV3IEFycmF5PEZyaWVuZFBvc2l0aW9uPigpO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1vY2tMaXN0RnJpZW5kLnB1c2goPEZyaWVuZFBvc2l0aW9uPntcbiAgICAgIGlkOiAxLFxuICAgICAgbGF0aXR1ZGU6IDM3LjMzMjMzMTQxLFxuICAgICAgbG9uZ2l0dWRlOiAtMTIyLjAzMTIxODZcbiAgICB9KVxuICAgIHRoaXMubW9ja0xpc3RGcmllbmQucHVzaCg8RnJpZW5kUG9zaXRpb24+e1xuICAgICAgaWQ6IDIsXG4gICAgICBsYXRpdHVkZTogMzcuMzMyNTMxNDEsXG4gICAgICBsb25naXR1ZGU6IC0xMjIuMDMxMjE4NlxuICAgIH0pXG4gICAgdGhpcy5tb2NrTGlzdEZyaWVuZC5wdXNoKDxGcmllbmRQb3NpdGlvbj57XG4gICAgICBpZDogMyxcbiAgICAgIGxhdGl0dWRlOiAzNy4zMzI2MzEyMSxcbiAgICAgIGxvbmdpdHVkZTogLTEyMi4wMzE1MTg3XG4gICAgfSlcbiAgfVxuXG4gIGdldEZyaWVuZHNCeUdyb3VwKGlkR3JvdXA6IG51bWJlcik6IE9ic2VydmFibGU8QXJyYXk8RnJpZW5kUG9zaXRpb24+PiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUub2Y8RnJpZW5kUG9zaXRpb25bXT4odGhpcy5tb2NrTGlzdEZyaWVuZCk7XG4gIH1cbiAgdXBkYXRlRnJpZW5kTG9jYXRpb24oY2FsbGJhY2s6IChGcmllbmRQb3NpdGlvbikgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vVE9ETzogTWVvdG9kbyBxdWUgZGVibyByZW1wbGF6YXIgY29uIGVsIGNvbXBvcnRhbWllbnRvIGRlIFNpZ25hbFJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVSYW5vbk1vdmUoY2FsbGJhY2spO1xuICAgICAgdGhpcy51cGRhdGVGcmllbmRMb2NhdGlvbihjYWxsYmFjayk7XG4gICAgfSwgMzAwKTtcbiAgfVxuXG4gIC8vVE9ETzogTWV0b2RvIG1vY2sgZG9uZGUgc2ltdWx0byBlbCBtb3ZpbWllbnRvIGRlIHVuIGFtaWdvIERlbW8gZWxpbWluYXJcbiAgcHJpdmF0ZSBnZW5lcmF0ZVJhbm9uTW92ZShjYWxsYmFjazogKEZyaWVuZFBvc2l0aW9uKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdmFyIGZyaWVuZCA9IHRoaXMubW9ja0xpc3RGcmllbmRbdGhpcy5nZXRSYW5kb21JbnQoMCwgMyldXG4gICAgdmFyIHRlc3QgPSAoTWF0aC5yYW5kb20oKSAqICgwLjAwMDAyMDAwIC0gMC4wMDA1NTEyMCkgKyAwLjAwMDU1MTIwKS50b0ZpeGVkKDQpO1xuICAgIHZhciB0ZXN0MiA9IChNYXRoLnJhbmRvbSgpICogKDAuMDAwMDQwMDAgLSAwLjAwMDc5MTIwKSArIDAuMDAwNzkxMjApLnRvRml4ZWQoNCk7XG4gICAgZnJpZW5kLmxhdGl0dWRlID0gZnJpZW5kLmxhdGl0dWRlICsgK3Rlc3Q7XG4gICAgZnJpZW5kLmxvbmdpdHVkZSA9IGZyaWVuZC5sb25naXR1ZGUgKyArdGVzdDI7XG4gICAgY2FsbGJhY2soZnJpZW5kKTtcbiAgfVxuXG5cbiAgaGFuZGxlRXJyb3JzKGVycm9yOiBSZXNwb25zZSkge1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGVycm9yLmpzb24oKSkpO1xuICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgfVxuICBwcml2YXRlIGdldFJhbmRvbUludChtaW4sIG1heCkge1xuICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xuICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xuICB9XG59XG4iXX0=